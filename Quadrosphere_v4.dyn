{
  "Uuid": "7055882b-1ba9-4207-9dc7-97bf40c65b99",
  "IsCustomNode": false,
  "Description": null,
  "Name": "Quadrosphere_v4",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.AdaptiveComponent.Locations",
      "Id": "be22abd3b2ea4eab95531325f7382bfa",
      "Inputs": [
        {
          "Id": "b79124f0276e44908d4442fecc32620e",
          "Name": "adaptiveComponent",
          "Description": "Revit.Elements.AdaptiveComponent",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3f259e5b0f1f4f04b1579187689bf638",
          "Name": "Point[]",
          "Description": "Point[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "AdaptiveComponent.Locations: Point[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Line.ByStartPointEndPoint@Autodesk.DesignScript.Geometry.Point,Autodesk.DesignScript.Geometry.Point",
      "Id": "917a02b3bda04b41a3afd8cfc520a20e",
      "Inputs": [
        {
          "Id": "459ab373e508463096a12a33fe1fb9dc",
          "Name": "startPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a71fd3e21a564a3b86bcf8873bf7ca52",
          "Name": "endPoint",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a393ddaba1d1499d977bb447a071478a",
          "Name": "Line",
          "Description": "Line",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Creates a straight Line between two input Points.\n\nLine.ByStartPointEndPoint (startPoint: Point, endPoint: Point): Line"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n\r\n\r\np = IN[0]\r\noutp = []\r\n\r\np1 = []\r\np2 = []\r\np3 = []\r\n\r\nif isinstance(p[0], list):\r\n\tcp = \"list of elements\"\r\n\tfor i in p:\r\n\t\tgg = []\r\n\t\tfor j in i:\r\n\r\n\t\t\txxx = j.X\r\n\t\t\tyyy = j.Y\r\n\t\t\tzzz = j.Z\t\t\t\r\n\t\t\t\r\n\t\t\tif -0.001<j.X<0.001: #in meters!\r\n\t\t\t\txxx = 0\r\n\t\t\tif -0.001<j.Y<0.001:\r\n\t\t\t\tyyy = 0\t\r\n\t\t\tif -0.001<j.Z<0.001:\r\n\t\t\t\tzzz = 0\t\t\t\t\t\r\n\r\n\t\t\t\t\r\n\t\t\tgg.append(Point.ByCoordinates(xxx/1000,yyy/1000,zzz/1000))\r\n\t\t\t\r\n\t\toutp.append(gg)\r\n\t\t\r\n\tfor i in range(len(p)):\r\n\t\tp1.append(outp[i][0])\r\n\t\tp2.append(outp[i][1])\r\n\t\tp3.append(outp[i][2])\t\t\r\n\t\t\r\n\t\r\n\t\t\r\nelse: \r\n\tcp = \"one element\"\r\n\tfor j in p:\r\n\t\toutp.append(Point.ByCoordinates(j.X/1000,j.Y/1000,j.Z/1000))\t\t\r\n\t\r\n\tp1.append(outp[0])\r\n\tp2.append(outp[1])\r\n\tp3.append(outp[2])\t\r\n\t\r\nOUT = p1,p2,p3",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "e87da6ba91aa455cb0d516cb66a4aeb1",
      "Inputs": [
        {
          "Id": "50d0d0eda3e44adba4125379bb150fab",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "725d2afedda94d98932eea3f1e7dcdbf",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p1[0];",
      "Id": "863926c6d0ea4b8ba932aac833354d76",
      "Inputs": [
        {
          "Id": "934672aef6f349c3a6f970e1284897b8",
          "Name": "p1",
          "Description": "p1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5aa7477e1e084c01bd664ad2af429c1c",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p2[1];",
      "Id": "ef4fcf581ad3480ab41d6b682433b450",
      "Inputs": [
        {
          "Id": "5feb84424d634713bd3ced247aded66b",
          "Name": "p2",
          "Description": "p2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b6bd23fbc104a708ebd5fa7e8cc3607",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p3[2];",
      "Id": "79db57e7b7d3488c8fbaf2c90c370461",
      "Inputs": [
        {
          "Id": "de0b5ad7ae564c558dac914da3524790",
          "Name": "p3",
          "Description": "p3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5eec9f1f0a5545ba80edda6960d45a83",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p1[0];",
      "Id": "b0971dcf1fd047d580cec0483210bdfd",
      "Inputs": [
        {
          "Id": "3b004ef80ccb4c03b71d84a0f3e82c69",
          "Name": "p1",
          "Description": "p1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b6032bfb11dd4cdbbc4181fdad70dc0b",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p2[1];",
      "Id": "3384236d715c499e9b5b8ef9aabd5851",
      "Inputs": [
        {
          "Id": "eb09ca9df2334457beec7348d0b5e160",
          "Name": "p2",
          "Description": "p2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bc9c98bd19984e43b9488ffdbe28bd1e",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "p3[2];",
      "Id": "e673add8a3fc45bf880cd766dbffb528",
      "Inputs": [
        {
          "Id": "b0792bb531734afa9453014e4d914a36",
          "Name": "p3",
          "Description": "p3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "705eaf9e6a7f483fb8197dcbc4e75955",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n\r\n\r\np = IN[0]\r\noutp = []\r\n\r\np1 = []\r\np2 = []\r\np3 = []\r\n\r\nscale = 1\r\n\r\nif isinstance(p[0], list):\r\n\tcp = \"list of elements\"\r\n\tfor i in p:\r\n\t\tgg = []\r\n\t\tfor j in i:\r\n\t\t\tgg.append(Point.ByCoordinates(j.X/scale,j.Y/scale,j.Z/scale))\r\n\t\toutp.append(gg)\r\n\t\t\r\n\tfor i in range(len(p)):\r\n\t\tp1.append(outp[i][0])\r\n\t\tp2.append(outp[i][1])\r\n\t\tp3.append(outp[i][2])\t\t\r\n\t\t\r\n\t\r\n\t\t\r\nelse: \r\n\tcp = \"one element\"\r\n\tfor j in p:\r\n\t\toutp.append(Point.ByCoordinates(j.X/scale,j.Y/scale,j.Z/scale))\t\t\r\n\t\r\n\tp1.append(outp[0])\r\n\tp2.append(outp[1])\r\n\tp3.append(outp[2])\t\r\n\t\r\nOUT = p1,p2,p3",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "688038111f12410ca3c3552b70214f15",
      "Inputs": [
        {
          "Id": "d452859d25434977b75e6df2114c4a58",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40058ed97a584947bd303c39369dc194",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a9311a6289a042f9898f76e395c2613e",
      "Inputs": [
        {
          "Id": "c68b8520d9614c23bf21bd66dbbc4c88",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6e34427326694365a215bf02f91b20c9",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a05e07460a8f4b52931b95bc268aed6b",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Section width\";",
      "Id": "f0692c59a60c4d3aad09d9f5cd58492e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4477a1ddd4dd41ac8321aadd5cd4e5bc",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b3c6fb944fdd42439f20e656e92cfdc3",
      "Inputs": [
        {
          "Id": "d0ad9d470dba4a9a88c011535b6a8fa8",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6897c549b2f7446698a818f57402634a",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#this script is to calculate the angle to rotate the section\r\n#unfortunately it is impossible to get it from adaptive family because adaptive points set to GLOBAL behave unpredictable\r\n\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport math\r\n\r\n# an -  variable for angle\r\n# x_1_3 means x distance between points 1 and 3\r\n# L_1_3 means shortest distance between points 1 and 3\r\n\r\np1_nt = IN[0]\r\np1 = []\r\np2_nt = IN[1]\r\np2 = []\r\np3= IN[2]\r\n\r\nan_fi_d = [] #calculated angle\r\n\r\n\r\ntest = []\r\ntest2 = []\r\n\r\nif 2>1:\r\n\t\r\n\tx_1_2 = []\r\n\tx_1_3 = []\r\n\tx_2_3 = []\r\n\t\r\n\ty_1_2 = [] \r\n\ty_1_3 = []\r\n\ty_2_3 = []\r\n\t\r\n\tz_1_2 = []\r\n\tz_1_3 = []\r\n\tz_2_3 = []\r\n\t\r\n\tdim12 = []\r\n\tdim13 = []\r\n\tdim23 = []\r\n\t\r\n\tL_1_2 = []\r\n\tL_1_3 = []\r\n\tL_2_3 = []\r\n\r\n\tan1 = []\r\n\tan1_d = []\r\n\t\r\n\tA1 = []\r\n\t\r\n\tan_g = []\r\n\tan_g_d = []\r\n\t\r\n\tcoeff = []\r\n\t\r\n\tA1_x = []\r\n\tA1_y = []\r\n\t\r\n\tx_A1_3 = []\r\n\ty_A1_3 = []\r\n\t\r\n\tA = []\r\n\r\n\tB = []\r\n\tL1H = []\r\n\tyy = []\r\n\txx = []\r\n\tf = []\r\n\t\r\n\tan_fi = []\r\n\tfortriang = []\r\n\r\n\tfor i in range (len(p3)): #p3 is always down\r\n\t\tif p2_nt[i].Z>p1_nt[i].Z:\r\n\t\t\ttest.append(\"p2.Z-p1.Z>0 ok\")\r\n\t\t\tp1.append(p1_nt[i])\r\n\t\t\tp2.append(p2_nt[i])\r\n\t\telse:\r\n\t\t\ttest.append(\"p2.Z-p1.Z<0 inverted\")\r\n\t\t\tp1.append(p2_nt[i])\t\t\r\n\t\t\tp2.append(p1_nt[i])\r\n\t\t\t\r\n\t\tx_1_2.append(math.fabs(p2[i].X-p1[i].X))\r\n\t\tx_1_3.append(math.fabs(p3[i].X-p1[i].X))\r\n\t\tx_2_3.append(math.fabs(p3[i].X-p2[i].X))\r\n\r\n\t\ty_1_2.append(math.fabs(p2[i].Y-p1[i].Y))\r\n\t\ty_1_3.append(math.fabs(p3[i].Y-p1[i].Y))\r\n\t\ty_2_3.append(math.fabs(p3[i].Y-p2[i].Y))\r\n\r\n\t\tz_1_2.append(math.fabs(p2[i].Z-p1[i].Z))\r\n\t\tz_1_3.append(math.fabs(p3[i].Z-p1[i].Z))\r\n\t\tz_2_3.append(math.fabs(p3[i].Z-p2[i].Z))\r\n\r\n\t\tdim12.append((x_1_2[i] ** 2 + y_1_2[i] ** 2) ** 0.5)\r\n\t\tdim13.append((x_1_3[i] ** 2 + y_1_3[i] ** 2) ** 0.5)\r\n\t\tdim23.append((x_2_3[i] ** 2 + y_2_3[i] ** 2) ** 0.5)\r\n\t\r\n\t\tL_1_2.append((z_1_2[i] ** 2 + dim12[i] ** 2) ** 0.5)\r\n\t\tL_1_3.append((z_1_3[i] ** 2 + dim13[i] ** 2) ** 0.5)\r\n\t\tL_2_3.append((z_2_3[i] ** 2 + dim23[i] ** 2) ** 0.5)\r\n\t\r\n\r\n\t\tan1.append(math.acos((L_1_2[i] ** 2  + L_1_3[i] ** 2  - L_2_3[i] ** 2 ) / (2 * L_1_2[i] * L_1_3[i])))\r\n\t\tan1_d.append( an1[i]*180/math.pi)\r\n\t\t\r\n\t\tA1.append(L_1_3[i] * math.cos(an1[i])) #length from p1 to point perpendicular point 3 (i.e. p3 projected on L_1_2)\r\n\t\r\n\t\tan_g.append(math.acos((L_1_2[i] ** 2  + dim12[i] ** 2  - z_1_2[i] ** 2 ) / (2 * L_1_2[i] * dim12[i])))\r\n\t\tan_g_d.append(an_g[i]*180/math.pi)\r\n\t\t\r\n\t\tcoeff.append(A1[i]/L_1_2[i])\r\n\t\t\r\n\t\t#now calulate all six edges of the prism\r\n\t\tif(p2[i].X >= p1[i].X):\r\n\t\t\tA1_x.append(p1[i].X + x_1_2[i]*(coeff[i]))  # x coord of p A1\r\n\t\telse:\r\n\t\t\tA1_x.append(p1[i].X - x_1_2[i]*(coeff[i]))\r\n\t\tif(p2[i].Y >= p1[i].Y):\t\t\r\n\t\t\tA1_y.append(p1[i].Y + y_1_2[i]*(coeff[i]))# y coord of p A1\r\n\t\telse:\r\n\t\t\tA1_y.append(p1[i].Y - y_1_2[i]*(coeff[i]))\r\n\t\t\t\r\n\t\tx_A1_3.append(math.fabs(A1_x[i]-p3[i].X))\r\n\t\ty_A1_3.append(math.fabs(A1_y[i]-p3[i].Y))\r\n\t\tA.append((x_A1_3[i] ** 2 + y_A1_3[i] ** 2) ** 0.5)  #horizontal edge from A1 to point 3 \t\r\n\t\t\r\n\t\tB.append(math.fabs(p1[i].Z+z_1_2[i]*coeff[i] - p3[i].Z))  #vertical edge\r\n\t\tL1H.append((L_1_3[i] ** 2 - A1[i] ** 2) ** 0.5) #from A1 point to point 3\r\n\t\tyy.append(B[i]*math.cos(an_g[i])) #opposite to B\r\n\t\txx.append(B[i]*math.sin(an_g[i])) #horizontal\r\n\t\tf.append((A[i] ** 2 - xx[i] ** 2) ** 0.5)   #horizontal opposite to A\r\n\t\tfortriang.append((L1H[i]**2+yy[i]**2-f[i]**2)/(2*L1H[i]*yy[i]))\r\n\t\t\r\n\t\tif fortriang[i] <= 1: #catch impossible geometry\r\n\t\t\tan_fi.append(math.acos((L1H[i]**2+yy[i]**2-f[i]**2)/(2*L1H[i]*yy[i])))\t\t\t\r\n\t\telse: \r\n\t\t\tan_fi.append(0)\t\r\n\t\t\r\n\t\tan_fi_d.append(an_fi[i]*180/math.pi)\r\n\r\n\t\t#full OUT = x_1_2,x_1_3,x_2_3,y_1_2,y_1_3,y_2_3,z_1_2,z_1_3,z_2_3,dim12,dim13,dim23,L_1_2,L_1_3,L_2_3,an1,an1_d,A1,an_g,an_g_d,coeff,A1_x,A1_y,x_A1_3,y_A1_3,A,B,L1H,yy,xx,f,an_fi, an_fi_d\r\n\t\tOUT = an_fi_d\r\n\r\n\r\n\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "14902ef6e3334f4db028e9c3e73695bb",
      "Inputs": [
        {
          "Id": "e78b978b6f6a4c7fad9feab3ab0982ea",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d79b489a2c724c419aa1e3043596ce92",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "56f06f01c93c442b9a4661096a285c81",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "580b78b89aa7486599c43cfa0eae0637",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetGammaAngle@DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar[],double",
      "Id": "5f602348ca0843bfbfba1ed0b699c1fc",
      "Inputs": [
        {
          "Id": "d5b30be5e70e45459de43f20c2e6c176",
          "Name": "bars",
          "Description": "A list of analytical bars.\n\nAnalyticalBar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e30a4edbb64c4a15901338bf7557acb5",
          "Name": "number",
          "Description": "The gamma angle value to assign.\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "869035c209bb428699ccf8d862eb3f8c",
          "Name": "AnalyticalBar[]",
          "Description": "The list of analytical bars passed as input.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Longest",
      "Description": "Assign provided gamma angle to the specified list of analytical bars.\n\nAnalyticalBar.SetGammaAngle (bars: AnalyticalBar[], number: double): AnalyticalBar[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.ByLine@Autodesk.DesignScript.Geometry.Line",
      "Id": "6075ca0906964c6fb38704d0b51a9b58",
      "Inputs": [
        {
          "Id": "d8553479611740a287e2126eff8cc41f",
          "Name": "line",
          "Description": "A line representing the analytical bar.\n\nLine",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3c1be43520f94fe48cfc52257022a6cd",
          "Name": "AnalyticalBar",
          "Description": "A newly created analytical bar.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an analytical bar using a geometrical line. This action will create two analytical nodes at the start and end of the line. \u0085\u0085\u0085If the new bar and node objects are existing inside the open document, they will be reused.\n\nAnalyticalBar.ByLine (line: Line): AnalyticalBar"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.SetSupportByName@DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode[],string",
      "Id": "803863a636114370a17a1835b02953ad",
      "Inputs": [
        {
          "Id": "1c19dc878a684aa08911090cfce20efb",
          "Name": "nodes",
          "Description": "A list of analytical nodes\n\nAnalyticalNode[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4bd07d5fb03d4e60afd86ef9431f1435",
          "Name": "name",
          "Description": "The support name to assign as defined in the open document\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ae8a2f1b737e4f7287c35cf0f1dd0f96",
          "Name": "AnalyticalNode[]",
          "Description": "The list of analytical nodes passed as input.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Assign provided support to the specified list of analytical nodes. The support must be available in the open document. \u0085\u0085\u0085The support name can be selected from either the list of available releases (UI node) or defined manually.\n\nAnalyticalNode.SetSupportByName (nodes: AnalyticalNode[], name: string): AnalyticalNode[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DynamoSimulation.RSA.AnalyticalModel.AnalyticalNode.ByPoint@Autodesk.DesignScript.Geometry.Point",
      "Id": "940ed177526045aaa68f5620b098cb45",
      "Inputs": [
        {
          "Id": "c20c0a0210de427189090a3598daf2f4",
          "Name": "point",
          "Description": "The analytical node position\n\nPoint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fe0e30134d9d444f9de75107e1272254",
          "Name": "AnalyticalNode",
          "Description": "A newly created analytical node.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create an analytical node using an existing geometrical point.\n\nAnalyticalNode.ByPoint (point: Point): AnalyticalNode"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Pinned\";",
      "Id": "ccbe03818cba459eaa69d17fc163959a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "037ebe0c88424a15a7bfb8ee778014cf",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n\r\np = IN[0]\r\noutp = []\r\nz_coord = []\r\n\r\n\r\nif isinstance(p, list):\r\n\tcp = \"list of elements\"\r\n\tfor i in p:\r\n\t\tif i.Z==0: #lazy way\r\n\t\t\toutp.append(i)\r\n\t\tz_coord.append(i.Z)\t\r\nelse: \r\n\tcp = \"one element\"\r\n\r\n\r\n\r\nOUT = set(outp)\t",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "9bc4a4abc17d4b79b47ed72385ab4fdc",
      "Inputs": [
        {
          "Id": "6c808cdae271424dabea8160276379f0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "028d640fabbf43f8835d0f3ddd82fd78",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "xy = IN[0]\r\nz = IN[1]\r\n\r\ngg = []\r\n\r\nfor i in range(len(z)):\r\n\tgg.append(xy[0][i])\r\n\tgg.append(xy[1][i])\r\n\tgg.append(z[i])\r\n\r\nOUT = gg",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "0bb8a95048c14a389d2fcbc38b17002a",
      "Inputs": [
        {
          "Id": "651a5fc153f84dadae15c73597a873ba",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d6a2ec20fad64e04a2ae95516174f933",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f52c8875d16141aaa7207bd9e4af0ac5",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom System import Environment\r\nuser = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\nclr.AddReferenceToFileAndPath(user +r\"\\Dynamo\\Dynamo Core\\2.6\\packages\\Structural Analysis for Dynamo\\bin\\RSA\\Interop.RobotOM.dll\")\r\nfrom RobotOM import *\r\nfrom System import Object\r\n#The inputs to this node will be stored as a list in the IN variables.\r\n#Define input\r\n\r\nUSec_name = IN[0]\r\nUSec_mat = IN[1]\r\nUSec_B = IN[2]\r\nUSec_H = IN[3]\r\nreload = IN[4]\r\n\r\napplication = RobotApplicationClass()\r\nproject = application.Project\r\nstructure = project.Structure\r\nlabels = structure.Labels\r\nProjectPrefs = project.Preferences\r\nbars = structure.Bars\r\n\r\n\r\n\r\n\r\n#User rectangular section\r\nfor i in range(len(USec_name)):\r\n\tlab_serv = IRobotLabelServer \r\n\tlab_serv = labels\r\n\tsec = IRobotLabel\r\n\tsec = lab_serv.create(IRobotLabelType.I_LT_BAR_SECTION, USec_name[i])\r\n\tdata = sec.data\r\n\tdata.Type = IRobotBarSectionType.I_BST_NS_RECT\r\n\tdata.ShapeType = IRobotBarSectionShapeType.I_BSST_RECT_FILLED\r\n\tnonst_data = IRobotBarSectionNonstdData\r\n\tnonst_data = data.CreateNonstd(0)\r\n\tnonst_data.SetValue(IRobotBarSectionNonstdDataValue.I_BSNDV_RECT_B,USec_B[i])\r\n\tnonst_data.SetValue(IRobotBarSectionNonstdDataValue.I_BSNDV_RECT_H,USec_H[i])\r\n\tdata.MaterialName = USec_mat[i]\r\n\tdata.CalcNonstdGeometry()\r\n\tlab_serv.Store(sec)\r\n\t\r\n\r\n\r\nOUT = \"labels gemaakt\"",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "1c889fef284c44bbaf2096de52e8fce0",
      "Inputs": [
        {
          "Id": "3b568dcba0694aa4ab18e0d92bd95627",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "96f99bdbb949446683f4abd6b01ea88b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8f735362829b4a8e8d28134f21403e39",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "02b67246d4c74163af4bfffeb1dbb496",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cfe1384f84b247298feaabbb0a97c300",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7b16f1b2395544ffa9d4bb2c69d65d92",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"alpbau\"];",
      "Id": "bca6bfab2d714e169fc70dbd33038a02",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "22f19fa5241c43e1abca9e44782dc577",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\"WOOD\"];",
      "Id": "c2afad3edacc407db0143e5fcd62c168",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2026d38ef57c410582487d0712ddcac9",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "a676d5d537f0433cb193f68bc11f5883",
      "Inputs": [
        {
          "Id": "9f4a34a192fb4ed298aa0d4f13cb4950",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "330b29873ba7497bb1a6deb0bc4f0c44",
          "Name": "parameterName",
          "Description": "The name of the parameter whose value you want to obtain.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c56cec72fe64cc7a37f61acb9d55d11",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the value of one of the element's parameters.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Section height\";",
      "Id": "f2a80c82fbd74fd88bcd9b94c380182c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9c1d4d22a6374398948e85489e98122a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar.SetSectionByName@DynamoSimulation.RSA.AnalyticalModel.AnalyticalBar[],string",
      "Id": "9c443eb5973547b8bd7323c1d82695ba",
      "Inputs": [
        {
          "Id": "a1810c8ea3964b52a20296f1383f465a",
          "Name": "analyticalBars",
          "Description": "A list of analytical bars.\n\nAnalyticalBar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c3338d7d27e44ede94b6d8ca1db196f8",
          "Name": "name",
          "Description": "The section name to assign as defined in the open document.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eeaac2b922ae41bb87be1835f553cef1",
          "Name": "AnalyticalBar[]",
          "Description": "The list of analytical bars passed as input.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Assign provided section to the specified list of analytical bars. \u0085The section must be available in the open document. \u0085\u0085\u0085The section name can be selected from either the list of available releases (UI node) or defined manually.\n\nAnalyticalBar.SetSectionByName (analyticalBars: AnalyticalBar[], name: string): AnalyticalBar[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[x[0]/1000];",
      "Id": "99c49945e6ec42b5a4470050d6a66b1c",
      "Inputs": [
        {
          "Id": "db8fa2aa6f3e47b8bc0d56e6525f314a",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72ab53a5333643239c7a86f244c00936",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[x[0]/1000];",
      "Id": "314862d186b64a6897f92f46b03693bc",
      "Inputs": [
        {
          "Id": "e8f6455c0d294095a17f2ace3c2a552e",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9acafa1ed86a4b558acf11e14eaa9826",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "name = IN[0]\r\nbypass = IN[1]\r\n\r\nif bypass!= None or bypass!= \"null\":\r\n\tOUT = name[0]",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "084edb144fe64c6b97df32e0e7f4170a",
      "Inputs": [
        {
          "Id": "5dea036d14034879b22b7b987f7ac3f7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c28be74b1b22414aa003f4398a395fcf",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "541864c2b8db4209917f7fc69e04e5bd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n\r\np1 = IN[0]\r\np2 = IN[1]\r\np3 = IN[2]\r\n\r\nerror = list(set(p3))\r\n\r\nxx = error[0].X\r\nyy = error[0].Y\r\n\r\np1f = []\r\np2f = []\r\n\r\n\r\nif len(error)==1:\r\n\tfor i in range(len(p1)):\r\n\t\tp1f.append(Point.ByCoordinates(p1[i].X-xx,p1[i].Y-yy,p1[i].Z))\r\n\t\tp2f.append(Point.ByCoordinates(p2[i].X-xx,p2[i].Y-yy,p2[i].Z))\r\n\r\n\r\nOUT = p1f,p2f",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a9d203e97f4d4a488ad6564ebd05d9d9",
      "Inputs": [
        {
          "Id": "a6aad8d2b0504a1cb94651ad9de4320f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b3f28a533d540e49f39e4bfd4bd85ad",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "890f01086e3c44bcb2ceb274ff5d1874",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1b00fd9cc2424c44b23693ff8aef89fd",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FirstItem@var[]..[]",
      "Id": "63ad724097a74825993c1fb5194501fd",
      "Inputs": [
        {
          "Id": "06ffc66208e44d28b09d6e4911f6da10",
          "Name": "list",
          "Description": "List to get the first item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1b6054c357f41e1809a805092d3f54d",
          "Name": "item",
          "Description": "First item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns the first item in a list.\n\nList.FirstItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.LastItem@var[]..[]",
      "Id": "a5f6ee59ccc54045bca512282ec16d51",
      "Inputs": [
        {
          "Id": "904b3bbe2dfc4989ae0b5dcc8cf87cb5",
          "Name": "list",
          "Description": "List to get the last item of.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1cf92b5cc534455d9bd2b18d9457f864",
          "Name": "last",
          "Description": "Last item in the list.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Retrieves the last item in a list.\n\nList.LastItem (list: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom System import Environment\r\nuser = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\nclr.AddReferenceToFileAndPath(user +r\"\\Dynamo\\Dynamo Core\\2.6\\packages\\Structural Analysis for Dynamo\\bin\\RSA\\Interop.RobotOM.dll\")\r\nfrom RobotOM import *\r\nfrom System import Object\r\n\r\n\r\npt1 = IN[0]\r\npt2 = IN[1]\r\nsw = IN[2]\r\n\r\nif sw!=None or sw!=\"null\":\r\n\tsw = 1\r\nelse: sw = 0\r\n\r\n\r\n\r\ncoord = []\r\nxx = []\r\nyy = []\r\nzz = []\r\n\r\n\r\napplication = RobotApplicationClass()\r\nproject = application.Project\r\nstructure = project.Structure\r\n#labels = structure.Labels\r\n#ProjectPrefs = project.Preferences\r\nbars = structure.Bars\r\nbar_col = bars.GetAll()\r\n\r\n\r\n\r\nkk = []\r\nzz = []\r\nff = []\r\nm = 0\r\nht = []\r\n\r\n#get the bars number\r\ntry:\r\n\tfor i in range(1,1000):\r\n\t\tif bar_col.Get(i):\r\n\t\t\tm = m+1 #total bars\r\nexcept: mmmm = \"tt\"\r\n\r\n#get all the bars\r\nfor i in range(1,m):\r\n\tkk.append(bar_col.Get(i))\r\n\t\r\n#reset the angle!\t\r\nfor i in kk:\r\n\tht.append(i.Gamma) #log what was before reset\r\n\ti.Gamma = 0\r\n\tzz.append(i.Gamma)\r\n\r\n\r\n\r\nRCF = application.CmpntFactory \r\nGP3D = IRobotComponentType.I_CT_GEO_POINT_3D\r\n_x = RCF.Create(GP3D) # X local axis vector in global coordinates\r\n_y = RCF.Create(GP3D) #Y local axis \r\n_z = RCF.Create(GP3D) #Z local axis\r\n\r\n### test example\r\n#br = bar_col.Get(1)\r\n#brn = br.GetLCS(_x,_y,_z)\r\n#ccc = [_x.X, _x.Y,_x.Z],[_y.X, _y.Y,_y.Z],[_z.X, _z.Y,_z.Z]\r\n###\r\nkk = []\r\nzz = []\r\nff = []\r\n#try:  can do simpler\r\n#\tfor i in range(1,1000):\r\n#\t\tkk.append(bar_col.Get(i))\r\n#\t\tmm = i\r\n#except:\r\n#\tkk = \"err\"\r\nif sw ==1:\r\n\tfor i in range(1,len(pt1)+1):\r\n\t\tzz.append(bar_col.Get(i))\r\n\t\r\n\tfor i in zz:\r\n\t\tf = (i.GetLCS(_x,_y,_z))\r\n\t\tg =[_x.X, _x.Y,_x.Z],[_y.X, _y.Y,_y.Z],[_z.X, _z.Y,_z.Z]\r\n\t\tff.append(g)\r\n\t\r\n\t### GO!\r\n\tgo = []\r\n\tangles = []\r\n\tfor i in range(len(pt1)):\t\r\n#######\t\r\n\t\t_yY = ff[i][1][1]\t\r\n\t\tif -0.0000001<_yY < 0.000000001:\r\n\t\t\t_yY = 0\r\n\t\tif _yY > 0.99999999:\r\n\t\t\t_yY = 1\r\n\t\tif _yY < -0.99999999:\r\n\t\t\t_yY = -1\r\n\t\t\t\t\r\n\t\t_yX = ff[i][1][0]\t\r\n\t\tif -0.0000001<_yX<0.0000001:\r\n\t\t\tyX = 0\r\n\t\tif _yX>0.99999999:\r\n\t\t\t_yX = 1\r\n\t\tif _yX < -0.99999999:\r\n\t\t\t_yX = -1\r\n#########\r\n\r\n\t\tpt1X = pt1[i].X\r\n\t\tpt1Y = pt1[i].Y\r\n\t\tpt2X = pt2[i].X\r\n\t\tpt2Y = pt2[i].Y\t\t\r\n\r\n\r\n\t\tif -0.000001<pt1[i].X<0.000001:\r\n \t\t\tpt1X = 0\r\n\r\n\t\tif -0.000001<pt1[i].Y<0.000001:\r\n \t\t\tpt1Y = 0\r\n\r\n\t\t\r\n\t\tif -0.000001<pt2[i].X<0.000001:\r\n \t\t\tpt2X = 0\r\n\r\n\t\tif -0.000001<pt2[i].Y<0.000001:\r\n \t\t\tpt2Y = 0\r\n#########\r\n\r\n\r\n\t\tif _yY==0 or abs(_yY)==1:\r\n\t\t\tif abs(pt1Y+_yY) > abs(pt1Y):\r\n\t\t\t\tangles.append(-1)\r\n\t\t\telif abs(pt1X+_yX) > abs(pt1X):\r\n\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\t\t\t\r\n\t\t\t\tangles.append(-1)\r\n\t\t\telse: \r\n\t\t\t\tangles.append(1)\r\n\t\r\n\t\telse:\t\t\r\n\t\t\tif pt1X != 0 and abs(pt1Y)<abs(pt2Y): \t\t \t\r\n\t\t\t\tif abs(pt1X+_yX) > abs(pt1X):\r\n\t\t\t\t\tangles.append(-1)\r\n\t\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\r\n\t\t\t\telse: \r\n\t\t\t\t\tangles.append(1)\r\n\t\t\t\t\t#angles.append([pt1X, pt1Y, pt2X,pt2Y, _yX, _yY])\r\n\t\t\telif pt2X != 0 and abs(pt2Y)<abs(pt1Y): \r\n\t\t\t\tif abs(pt2X+_yX) > abs(pt2X):\r\n\t\t\t\t\tangles.append(-1)\t\t\t\t\t\r\n\t\t\t\telse: angles.append(1)\r\n##################################\r\n\t\t\telif pt1X != 0 and abs(pt1Y)>abs(pt2Y): \t\t \t\r\n\t\t\t\tif abs(pt1X+_yX) < abs(pt1X):\r\n\t\t\t\t\tangles.append(-1)\r\n\t\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\r\n\t\t\t\telse: \r\n\t\t\t\t\tangles.append(1)\r\n\t\t\t\t\t#angles.append([pt1X, pt1Y, pt2X,pt2Y, _yX, _yY])\r\n\t\t\telif pt2X != 0 and abs(pt2Y)>abs(pt1Y): \r\n\t\t\t\tif abs(pt2X+_yX) < abs(pt2X):\r\n\t\t\t\t\tangles.append(-1)\t\t\t\t\t\r\n\t\t\t\telse: angles.append(1)\r\n###############################\r\n\r\n\t\t\telse: \r\n\t\t\t\t\tangles.append(0)\t\r\n\r\n\r\n\r\nOUT = angles\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "359a5f06af224ceab42c0d1c2b125738",
      "Inputs": [
        {
          "Id": "52aef491fd9448508e28fa03713151fc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5fccf60c8c654411a22ef94c5571e110",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d69e57783cdd4ec7b7ff4dab15359902",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8a46df739bbd460f910622422a2f1bbc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "n = IN[0]\r\nm = IN[1]\r\n\r\n\r\nnn = []\r\n\r\nif m != None or m!= \"null\":\r\n\tfor i in range(len(n)):\r\n\t\tnn.append(n[i]*m[i])\r\n\t\tOUT = nn\r\n\t\t\r\nelse: OUT = n\r\n\t\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "955e312146f248fba0cf65329069c723",
      "Inputs": [
        {
          "Id": "e525d145656543b98cbb4f04f562ff7d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ede24e357c594b51aa63adafe57203ae",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6a5fe274b120493c8f7e914873ef85f1",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "2ef9d92f2a244e738ec9c3bdb1e787c3",
      "Inputs": [
        {
          "Id": "1388ea73d8594917b1f6c9cf8a4af2f1",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c55005f2c1f74d5e84f7d80705256181",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\n\r\np1 = IN[0]\r\n\r\nif len(list(set(p1)))!=1:\r\n\terror\r\n\r\nelse: OUT = set(p1)",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "bce92b1a4ab745c2a4b733392670201e",
      "Inputs": [
        {
          "Id": "de5f95a4dfe94d7a82c1a0583af75704",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4d0fd7fc144a490da5721124bcdcf0fe",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nfrom System import Environment\r\nuser = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)\r\nclr.AddReferenceToFileAndPath(user +r\"\\Dynamo\\Dynamo Core\\2.6\\packages\\Structural Analysis for Dynamo\\bin\\RSA\\Interop.RobotOM.dll\")\r\nfrom RobotOM import *\r\nfrom System import Object\r\n\r\nimport math\r\n\r\n\r\n\r\npt1 = IN[0]\r\npt2 = IN[1]\r\n\r\nsw = IN[2]\r\n\r\nif sw!=None or sw!=\"null\":\r\n\tsw = 1\r\nelse: sw = 0\r\n\r\n\r\n\r\ncoord = []\r\nxx = []\r\nyy = []\r\nzz = []\r\n\r\n\r\napplication = RobotApplicationClass()\r\nproject = application.Project\r\nstructure = project.Structure\r\n#labels = structure.Labels\r\n#ProjectPrefs = project.Preferences\r\nbars = structure.Bars\r\nbar_col = bars.GetAll()\r\nbars_total = bars.FreeNumber\r\n\r\n\r\nRCF = application.CmpntFactory \r\nGP3D = IRobotComponentType.I_CT_GEO_POINT_3D\r\n_x = RCF.Create(GP3D) # X local axis vector in global coordinates\r\n_y = RCF.Create(GP3D) #Y local axis \r\n_z = RCF.Create(GP3D) #Z local axis\r\n\r\n### test example\r\n#br = bar_col.Get(1)\r\n#brn = br.GetLCS(_x,_y,_z)\r\n#ccc = [_x.X, _x.Y,_x.Z],[_y.X, _y.Y,_y.Z],[_z.X, _z.Y,_z.Z]\r\n###\r\nkk = []\r\nzz = []\r\nff = []\r\n#try:  can do simpler\r\n#\tfor i in range(1,1000):\r\n#\t\tkk.append(bar_col.Get(i))\r\n#\t\tmm = i\r\n#except:\r\n#\tkk = \"err\"\r\nif sw ==1:\r\n\tfor i in range(1,len(pt1)+1):\r\n\t\tzz.append(bar_col.Get(i))\r\n\t\r\n\tfor i in zz:\r\n\t\tf = (i.GetLCS(_x,_y,_z))\r\n\t\tg =[_x.X, _x.Y,_x.Z],[_y.X, _y.Y,_y.Z],[_z.X, _z.Y,_z.Z]\r\n\t\tff.append(g)\r\n\t\r\n\t### GO!\r\n\tgo = []\r\n\tangles = []\r\n\tfor i in range(len(pt1)):\r\n\t\t\r\n\t\t_yY = ff[i][1][1]\t\r\n\t\tif -0.000001<_yY < 0.000001:\r\n\t\t\t_yY = 0\r\n\t\tif _yY > 0.9999999:\r\n\t\t\t_yY = 1\r\n\t\tif _yY < -0.9999999:\r\n\t\t\t_yY = -1\r\n\t\t\t\t\r\n\t\t_yX = ff[i][1][0]\t\r\n\t\tif -0.000001<_yX<0.000001:\r\n \t\t\tyX = 0\r\n\t\tif _yX>0.9999999:\r\n\t\t\t_yX = 1\r\n\t\tif _yX < -0.9999999:\r\n\t\t\t_yX = -1\r\n\t\t\t\r\n\t\t\t\r\n\t\tpt1X = pt1[i].X\r\n\t\tpt1Y = pt1[i].Y\r\n\t\tpt2X = pt2[i].X\r\n\t\tpt2Y = pt2[i].Y\t\t\r\n\r\n\r\n\t\tif -0.000001<pt1[i].X<0.000001:\r\n \t\t\tpt1X = 0\r\n\r\n\t\tif -0.000001<pt1[i].Y<0.000001:\r\n \t\t\tpt1Y = 0\r\n\r\n\t\t\r\n\t\tif -0.000001<pt2[i].X<0.000001:\r\n \t\t\tpt2X = 0\r\n\r\n\t\tif -0.000001<pt2[i].Y<0.000001:\r\n \t\t\tpt2Y = 0\r\n\r\n\t\t\t\r\n\t\t\r\n\t\tif _yY==0 or abs(_yY)==1:\r\n\t\t\tif abs(pt1Y+_yY) > abs(pt1Y):\r\n\t\t\t\tangles.append(\"ortho 1 TO ROTATE\")\r\n\t\t\telif abs(pt1X+_yX) > abs(pt1X):\r\n\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\t\t\t\r\n\t\t\t\tangles.append(\"ortho 2 TO ROTATE\")\r\n\t\t\telse: \r\n\t\t\t\tangles.append(\"ortho\")\r\n\t\r\n\t\telse:\t\t\r\n\t\t\tif pt1X != 0 and abs(pt1Y)<abs(pt2Y): \t\t \t\r\n\t\t\t\tif abs(pt1X+_yX) > abs(pt1X):\r\n\t\t\t\t\tangles.append(\"non ortho Diamond1 TO ROTATE\")\r\n\t\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\r\n\t\t\t\telse: \r\n\t\t\t\t\tangles.append(\"non ortho Diamond1\")\r\n\t\t\t\t\t#angles.append([pt1X, pt1Y, pt2X,pt2Y, _yX, _yY])\r\n\t\t\telif pt2X != 0 and abs(pt2Y)<abs(pt1Y): \r\n\t\t\t\tif abs(pt2X+_yX) > abs(pt2X):\r\n\t\t\t\t\tangles.append(\"non ortho Diamond2 TO ROTATE\")\t\t\t\t\t\r\n\t\t\t\telse: angles.append(\"non ortho Diamond2\")\r\n##################################\r\n\t\t\telif pt1X != 0 and abs(pt1Y)>abs(pt2Y): \t\t \t\r\n\t\t\t\tif abs(pt1X+_yX) < abs(pt1X):\r\n\t\t\t\t\tangles.append(\"non ortho Shevron1 TO ROTATE\")\r\n\t\t\t\t\t#angles.append([pt1[i].X, pt1[i].Y, pt2[i].X,pt2[i].Y, _yX, _yY])\t\r\n\t\t\t\telse: \r\n\t\t\t\t\tangles.append(\"non ortho Shevron1\")\r\n\t\t\t\t\t#angles.append([pt1X, pt1Y, pt2X,pt2Y, _yX, _yY])\r\n\t\t\telif pt2X != 0 and abs(pt2Y)>abs(pt1Y): \r\n\t\t\t\tif abs(pt2X+_yX) < abs(pt2X):\r\n\t\t\t\t\tangles.append(\"non ortho Shevron2 TO ROTATE\")\t\t\t\t\t\r\n\t\t\t\telse: angles.append(\"non ortho Shevron2\")\r\n###############################\r\n\r\n\r\n\r\n\t\t\telse: \r\n\t\t\t\t\tangles.append([pt1X, pt1Y, pt2X,pt2Y, _yX, _yY])\r\n\r\nOUT = angles\r\n\r\n",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "2c608634212a42bfa2faf9d947e7c6d9",
      "Inputs": [
        {
          "Id": "0806f68fd6a6460594d34c7fbcd2bad2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a25cd31c8ae470d9e7fc7b8ca947f7f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "38974790fdd44299bc975f40f54e9d52",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a89dc5f359eb4b4c80d0b7fa0f14a4ae",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "c356887ae316466ba64c6752671a10fb",
      "Inputs": [
        {
          "Id": "9083709c6dc746019ebad88427b6d93f",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70754755e4f3456aa82992a7a46c92c3",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "bdbe1e39f39d433ca8a8e364787c3db6",
      "Inputs": [
        {
          "Id": "2f78e8efbf27426eaef8b0e94d4b0157",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5e7cbe1f11254fb384765b44c9092d1b",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 10.0,
      "MinimumValue": 0.0,
      "StepValue": 1.0,
      "InputValue": 8.0,
      "Id": "dc98c925051746a59838367e139eb780",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c806c610121643719346adba2872ccbf",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces numeric values."
    },
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementsSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "e854488f-7c14-4658-80e5-9f448087d31d-00000474",
        "e854488f-7c14-4658-80e5-9f448087d31d-00000475",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000454f",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000456b",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004579",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004588",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000459c",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-000045a1",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004608",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000460f",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004abb",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004f4c",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00004f68",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00005076",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000509b",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-0000520c",
        "c6a00405-811f-4b20-908c-4c5f04c8305f-00005224",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000057c0",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005807",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000587e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005909",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005a4d",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005a88",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005ae7",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005b3a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005c2d",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005ca0",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005d13",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00005dea",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006194",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006207",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000062b0",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006309",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006386",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006429",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006503",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000656c",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000656d",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006610",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000665e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006714",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006780",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006822",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000686a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000694e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006990",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006ba5",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006bfa",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006d05",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006d76",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006db4",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00006f77",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000706f",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000070cc",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007176",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000072b8",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000734e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000073eb",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000074c6",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000075e3",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000764a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000076cb",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000077a5",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007808",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000786b",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000078aa",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000790e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000796d",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000079bc",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000079fb",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007c1c",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007caa",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007d19",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007d88",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007e06",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007e07",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007ebf",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007f95",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00007fe3",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008052",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008095",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000080f5",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008152",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000081e6",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000824a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000082a0",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000830e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008448",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000848e",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000848f",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000084db",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000852a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008593",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008621",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008699",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008706",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008742",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-0000878a",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-000087dc",
        "bc4df5fc-5950-49a3-9b42-ca0ec8169cdd-00008865",
        "475b6be5-d6c0-4af9-b2a7-f9bae57b4cae-00094afd",
        "90a2e83c-31cd-4152-89db-b9b1a24ce65b-00099b19",
        "90a2e83c-31cd-4152-89db-b9b1a24ce65b-00099bf7",
        "90a2e83c-31cd-4152-89db-b9b1a24ce65b-00099c65",
        "90a2e83c-31cd-4152-89db-b9b1a24ce65b-00099e22",
        "90a2e83c-31cd-4152-89db-b9b1a24ce65b-00099e9f",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009aadb",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ab6c",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009abe8",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ac27",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ac72",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009accc",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ad42",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ad88",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009adea",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ae4e",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009ae99",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009aedb",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009af7a",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009afde",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b0a7",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b108",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b176",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b1bb",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b229",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b26a",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b2b0",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b3ae",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b3dc",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b423",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b459",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b499",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b500",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b54f",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b605",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b6ad",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b7b5",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b7f8",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b85c",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b8a0",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b8e8",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b91a",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b990",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009b9ec",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009baa5",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009baed",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bb50",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bb8f",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bc77",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bcaf",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bd46",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bd81",
        "40a06f32-23b2-43d8-b256-96019df09b6c-0009bde8",
        "f132d48c-0df8-4faf-81a0-49b28ab6d90a-0009d281",
        "4c1972fd-765e-4635-80f8-27a21fc37538-0009f6f7",
        "4c1972fd-765e-4635-80f8-27a21fc37538-0009f753"
      ],
      "Id": "97583c5a8e58490aac65f447a31114de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e6d635302a0f44eaa65e9d8ef6f260f4",
          "Name": "Elements",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#import sys\r\n#import clr\r\n#clr.AddReference('ProtoGeometry')\r\n#from Autodesk.DesignScript.Geometry import *\r\n\r\np = IN[0]\r\nm = []\r\n\r\nfor i in p:\r\n\tif str(i.GetType()) == \"Revit.Elements.AdaptiveComponent\":\r\n\t\tm.append(i)\r\n\r\nOUT = m",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "86301920c37447f3aad893366e9c51dd",
      "Inputs": [
        {
          "Id": "e2a69cb8f70b4f47aaf45c87d0ba12fc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6466c376478f418e83ea06b86234775d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"beam\";",
      "Id": "679edd29ae214842af4746d69e1d8c0e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "15f4fe6ac4d242beba3c6895bad62f7f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "ss = IN[0]\r\ngg = []\r\nfor i in ss:\r\n\t if IN[1] in str(i):\r\n\t \tgg.append(i)\r\n\r\n\t \t\r\nOUT = gg",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "d4587b5faf8948a9bcb6c72e30d96aad",
      "Inputs": [
        {
          "Id": "d8f80f235bda40deb940d0393919c4d0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "176cb78b71c54e4fae659777a2611d78",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bcb5586301424ec885b13ee2da9c8f13",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Category.ByName@string",
      "Id": "27317bd0853b4b5fb8cfa539edcc02d1",
      "Inputs": [
        {
          "Id": "4a6cf2b23b184ea1bb1c3d40ca6694a8",
          "Name": "name",
          "Description": "The built in category name.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "25160d8760824f0993d43e663382f9cd",
          "Name": "Category",
          "Description": "Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets a Revit category by the built-in category name.\n\nCategory.ByName (name: string): Category"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "c5483152885b4abdb345610f1860a7b7",
      "Inputs": [
        {
          "Id": "b5683d742ad44b87a7784fc5467ea366",
          "Name": "Category",
          "Description": "The Category",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a72f2b9345144c59a276cea344b055a9",
          "Name": "Elements",
          "Description": "An element type.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Get all elements of the specified category from the model."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Structural Connections",
      "Id": "339f50c41cc04b3bbcbc36800a4d6c71",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b0cc95660bc34b60a4dcfeb732ca66b0",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    }
  ],
  "Connectors": [
    {
      "Start": "3f259e5b0f1f4f04b1579187689bf638",
      "End": "2f78e8efbf27426eaef8b0e94d4b0157",
      "Id": "32115912da8d4fa58fc632eb42a05eff"
    },
    {
      "Start": "a393ddaba1d1499d977bb447a071478a",
      "End": "d8553479611740a287e2126eff8cc41f",
      "Id": "48a176e024a44ad09cd1c5bfe540dc66"
    },
    {
      "Start": "725d2afedda94d98932eea3f1e7dcdbf",
      "End": "3b004ef80ccb4c03b71d84a0f3e82c69",
      "Id": "8758dd340c484c939889a0f59d94f67c"
    },
    {
      "Start": "725d2afedda94d98932eea3f1e7dcdbf",
      "End": "eb09ca9df2334457beec7348d0b5e160",
      "Id": "2ad0c5132af5438faec10a1b89daee92"
    },
    {
      "Start": "725d2afedda94d98932eea3f1e7dcdbf",
      "End": "b0792bb531734afa9453014e4d914a36",
      "Id": "f10433492fa54bed819e10f0c5f1b6c0"
    },
    {
      "Start": "5aa7477e1e084c01bd664ad2af429c1c",
      "End": "e78b978b6f6a4c7fad9feab3ab0982ea",
      "Id": "c766671d05994e6b88a96fb56d18e4b8"
    },
    {
      "Start": "3b6bd23fbc104a708ebd5fa7e8cc3607",
      "End": "d79b489a2c724c419aa1e3043596ce92",
      "Id": "0fc5601e96b04b789f648309c8fd06ea"
    },
    {
      "Start": "5eec9f1f0a5545ba80edda6960d45a83",
      "End": "56f06f01c93c442b9a4661096a285c81",
      "Id": "7e7bd7dcabd649319c528f96111070cc"
    },
    {
      "Start": "b6032bfb11dd4cdbbc4181fdad70dc0b",
      "End": "a6aad8d2b0504a1cb94651ad9de4320f",
      "Id": "7ce05f9318104482bb4dfd19d4c526ca"
    },
    {
      "Start": "bc9c98bd19984e43b9488ffdbe28bd1e",
      "End": "7b3f28a533d540e49f39e4bfd4bd85ad",
      "Id": "79150b74f8f9460d9c05d6e91b186c7d"
    },
    {
      "Start": "705eaf9e6a7f483fb8197dcbc4e75955",
      "End": "890f01086e3c44bcb2ceb274ff5d1874",
      "Id": "4b1e4752470449bdb0d178bdee8c944b"
    },
    {
      "Start": "705eaf9e6a7f483fb8197dcbc4e75955",
      "End": "de5f95a4dfe94d7a82c1a0583af75704",
      "Id": "37c77b2f785c4253ace75d5d9f5045cf"
    },
    {
      "Start": "705eaf9e6a7f483fb8197dcbc4e75955",
      "End": "d6a2ec20fad64e04a2ae95516174f933",
      "Id": "231b37f113144c1680440c54847f4abd"
    },
    {
      "Start": "40058ed97a584947bd303c39369dc194",
      "End": "934672aef6f349c3a6f970e1284897b8",
      "Id": "14bc3261f3874630bea55db2874f9cd7"
    },
    {
      "Start": "40058ed97a584947bd303c39369dc194",
      "End": "5feb84424d634713bd3ced247aded66b",
      "Id": "0e6a5eb3ae364361bfa0a92c60d10181"
    },
    {
      "Start": "40058ed97a584947bd303c39369dc194",
      "End": "de0b5ad7ae564c558dac914da3524790",
      "Id": "7b113326e00144ed9004013b7cceaccc"
    },
    {
      "Start": "a05e07460a8f4b52931b95bc268aed6b",
      "End": "db8fa2aa6f3e47b8bc0d56e6525f314a",
      "Id": "41c70a60b74c442ca136a8eb36832dff"
    },
    {
      "Start": "4477a1ddd4dd41ac8321aadd5cd4e5bc",
      "End": "6e34427326694365a215bf02f91b20c9",
      "Id": "f185189933c84b13aba7c3aba7a34742"
    },
    {
      "Start": "6897c549b2f7446698a818f57402634a",
      "End": "e525d145656543b98cbb4f04f562ff7d",
      "Id": "f186bc15610f49c985ec1e38c5a8bd7b"
    },
    {
      "Start": "580b78b89aa7486599c43cfa0eae0637",
      "End": "d0ad9d470dba4a9a88c011535b6a8fa8",
      "Id": "97673e5a0cf649f1b2bd048d5bd14ef4"
    },
    {
      "Start": "3c1be43520f94fe48cfc52257022a6cd",
      "End": "a1810c8ea3964b52a20296f1383f465a",
      "Id": "7a42792c4b3a4e4fa0a692bfe7abddd5"
    },
    {
      "Start": "3c1be43520f94fe48cfc52257022a6cd",
      "End": "d5b30be5e70e45459de43f20c2e6c176",
      "Id": "950c897788d146158e726298a4bcb359"
    },
    {
      "Start": "fe0e30134d9d444f9de75107e1272254",
      "End": "1c19dc878a684aa08911090cfce20efb",
      "Id": "ed21a569e083443eb6fef9214a7b7066"
    },
    {
      "Start": "037ebe0c88424a15a7bfb8ee778014cf",
      "End": "4bd07d5fb03d4e60afd86ef9431f1435",
      "Id": "83a48bdf20f1410a8404f90e8fbfa4a8"
    },
    {
      "Start": "028d640fabbf43f8835d0f3ddd82fd78",
      "End": "c20c0a0210de427189090a3598daf2f4",
      "Id": "9d88c91f279047d99d58a329ba0c55a3"
    },
    {
      "Start": "f52c8875d16141aaa7207bd9e4af0ac5",
      "End": "6c808cdae271424dabea8160276379f0",
      "Id": "58f8806492434e5fa42f9be31e3e7e9f"
    },
    {
      "Start": "7b16f1b2395544ffa9d4bb2c69d65d92",
      "End": "c28be74b1b22414aa003f4398a395fcf",
      "Id": "b870dd50fec140a798ec0e4f49628c83"
    },
    {
      "Start": "22f19fa5241c43e1abca9e44782dc577",
      "End": "3b568dcba0694aa4ab18e0d92bd95627",
      "Id": "c9eb3fd0dd234cfeadcdacb5ff6bfa43"
    },
    {
      "Start": "22f19fa5241c43e1abca9e44782dc577",
      "End": "5dea036d14034879b22b7b987f7ac3f7",
      "Id": "bc1d044366384429a3c0a755cfd58445"
    },
    {
      "Start": "2026d38ef57c410582487d0712ddcac9",
      "End": "96f99bdbb949446683f4abd6b01ea88b",
      "Id": "0f783c2ec56d48d1b824d9948e076662"
    },
    {
      "Start": "0c56cec72fe64cc7a37f61acb9d55d11",
      "End": "e8f6455c0d294095a17f2ace3c2a552e",
      "Id": "e725be409a1d4846adc8656f4d820bc9"
    },
    {
      "Start": "9c1d4d22a6374398948e85489e98122a",
      "End": "330b29873ba7497bb1a6deb0bc4f0c44",
      "Id": "90c29a22a91645349e1408eec42ad6e1"
    },
    {
      "Start": "72ab53a5333643239c7a86f244c00936",
      "End": "8f735362829b4a8e8d28134f21403e39",
      "Id": "e93bc31964954e8890de21d7c155839e"
    },
    {
      "Start": "9acafa1ed86a4b558acf11e14eaa9826",
      "End": "02b67246d4c74163af4bfffeb1dbb496",
      "Id": "f92e5b4220074e0598b5f8a47b1d6c27"
    },
    {
      "Start": "541864c2b8db4209917f7fc69e04e5bd",
      "End": "c3338d7d27e44ede94b6d8ca1db196f8",
      "Id": "37873974cddb40138265ed4cd4347ee5"
    },
    {
      "Start": "1b00fd9cc2424c44b23693ff8aef89fd",
      "End": "06ffc66208e44d28b09d6e4911f6da10",
      "Id": "d42dfd4baec4464a99f17c6fd6a41ce7"
    },
    {
      "Start": "1b00fd9cc2424c44b23693ff8aef89fd",
      "End": "904b3bbe2dfc4989ae0b5dcc8cf87cb5",
      "Id": "ee6e3d6aa1234b148de8f9411a1c63ff"
    },
    {
      "Start": "1b00fd9cc2424c44b23693ff8aef89fd",
      "End": "651a5fc153f84dadae15c73597a873ba",
      "Id": "4c592b58298045f4911b3462b503c8b3"
    },
    {
      "Start": "c1b6054c357f41e1809a805092d3f54d",
      "End": "459ab373e508463096a12a33fe1fb9dc",
      "Id": "187c4fddb6794867ab4791770139868a"
    },
    {
      "Start": "c1b6054c357f41e1809a805092d3f54d",
      "End": "52aef491fd9448508e28fa03713151fc",
      "Id": "7d55284cd5034760b538fe7293f8de92"
    },
    {
      "Start": "c1b6054c357f41e1809a805092d3f54d",
      "End": "0806f68fd6a6460594d34c7fbcd2bad2",
      "Id": "2106e499a35e415b8d5673ec73e1d463"
    },
    {
      "Start": "1cf92b5cc534455d9bd2b18d9457f864",
      "End": "a71fd3e21a564a3b86bcf8873bf7ca52",
      "Id": "76f47597739243b8b7f4fddb34c27e1a"
    },
    {
      "Start": "1cf92b5cc534455d9bd2b18d9457f864",
      "End": "5fccf60c8c654411a22ef94c5571e110",
      "Id": "91cad80ceb4f4d53b0235ab03c8fae57"
    },
    {
      "Start": "1cf92b5cc534455d9bd2b18d9457f864",
      "End": "2a25cd31c8ae470d9e7fc7b8ca947f7f",
      "Id": "2be23721decf4a63aee4137c3079a076"
    },
    {
      "Start": "8a46df739bbd460f910622422a2f1bbc",
      "End": "1388ea73d8594917b1f6c9cf8a4af2f1",
      "Id": "565d691c014d469aa290a5cf1f7a2243"
    },
    {
      "Start": "6a5fe274b120493c8f7e914873ef85f1",
      "End": "e30a4edbb64c4a15901338bf7557acb5",
      "Id": "6e1bd28921fb488da0f639920372d3b5"
    },
    {
      "Start": "c55005f2c1f74d5e84f7d80705256181",
      "End": "ede24e357c594b51aa63adafe57203ae",
      "Id": "7f2984fa24a3410b86094d07da145091"
    },
    {
      "Start": "a89dc5f359eb4b4c80d0b7fa0f14a4ae",
      "End": "9083709c6dc746019ebad88427b6d93f",
      "Id": "ef64636dc13b41d8b01b1bdb2d5fe724"
    },
    {
      "Start": "5e7cbe1f11254fb384765b44c9092d1b",
      "End": "d452859d25434977b75e6df2114c4a58",
      "Id": "d1ee209709644ba783bc3395856c7507"
    },
    {
      "Start": "5e7cbe1f11254fb384765b44c9092d1b",
      "End": "50d0d0eda3e44adba4125379bb150fab",
      "Id": "43167a8770014e2c9b85fb1673247b0e"
    },
    {
      "Start": "c806c610121643719346adba2872ccbf",
      "End": "38974790fdd44299bc975f40f54e9d52",
      "Id": "7a8d28cd3b884ab8a3c405877567f042"
    },
    {
      "Start": "c806c610121643719346adba2872ccbf",
      "End": "d69e57783cdd4ec7b7ff4dab15359902",
      "Id": "d6d590cdaf064d68a0cc3150d2b2b5be"
    },
    {
      "Start": "c806c610121643719346adba2872ccbf",
      "End": "cfe1384f84b247298feaabbb0a97c300",
      "Id": "09188ffca978445582de66a7b83fbfb0"
    },
    {
      "Start": "6466c376478f418e83ea06b86234775d",
      "End": "d8f80f235bda40deb940d0393919c4d0",
      "Id": "b5ebf39db0ea420b89535bcf2c55c96f"
    },
    {
      "Start": "15f4fe6ac4d242beba3c6895bad62f7f",
      "End": "176cb78b71c54e4fae659777a2611d78",
      "Id": "7bbe03378161488db16c6a4877f8bceb"
    },
    {
      "Start": "bcb5586301424ec885b13ee2da9c8f13",
      "End": "9f4a34a192fb4ed298aa0d4f13cb4950",
      "Id": "0f2b92fb6b7d41199c56e392ae851a07"
    },
    {
      "Start": "bcb5586301424ec885b13ee2da9c8f13",
      "End": "c68b8520d9614c23bf21bd66dbbc4c88",
      "Id": "416e18ce1fa441fcae1c1d8d3d4189eb"
    },
    {
      "Start": "bcb5586301424ec885b13ee2da9c8f13",
      "End": "b79124f0276e44908d4442fecc32620e",
      "Id": "4ce558a4b14546898059c14d80c4d0f7"
    },
    {
      "Start": "25160d8760824f0993d43e663382f9cd",
      "End": "b5683d742ad44b87a7784fc5467ea366",
      "Id": "20ae6d93bb4b4b0e94714d6ab9d8c659"
    },
    {
      "Start": "a72f2b9345144c59a276cea344b055a9",
      "End": "e2a69cb8f70b4f47aaf45c87d0ba12fc",
      "Id": "234ad7d4137d447bb4e81bece2807c8d"
    },
    {
      "Start": "b0cc95660bc34b60a4dcfeb732ca66b0",
      "End": "4a6cf2b23b184ea1bb1c3d40ca6694a8",
      "Id": "8581cb08d6394f698846e7ed53e6011d"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [
    {
      "Name": "Structural Analysis for Dynamo",
      "Version": "2.11.0",
      "ReferenceType": "Package",
      "Nodes": [
        "5f602348ca0843bfbfba1ed0b699c1fc",
        "6075ca0906964c6fb38704d0b51a9b58",
        "803863a636114370a17a1835b02953ad",
        "940ed177526045aaa68f5620b098cb45",
        "9c443eb5973547b8bd7323c1d82695ba"
      ]
    }
  ],
  "Bindings": [
    {
      "NodeId": "6075ca09-0696-4c6f-b387-04d0b51a9b58",
      "Binding": {
        "ByLine_InClassDecl-1_InFunctionScope-1_Instance0_6075ca09-0696-4c6f-b387-04d0b51a9b58": ""
      }
    },
    {
      "NodeId": "940ed177-5260-45aa-a68f-5620b098cb45",
      "Binding": {
        "ByPoint_InClassDecl-1_InFunctionScope-1_Instance0_940ed177-5260-45aa-a68f-5620b098cb45": "PFNPQVAtRU5WOkVudmVsb3BlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhtbG5zOnhzZD0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOlNPQVAtRU5DPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyIgeG1sbnM6U09BUC1FTlY9Imh0dHA6Ly9zY2hlbWFzLnhtbHNvYXAub3JnL3NvYXAvZW52ZWxvcGUvIiB4bWxuczpjbHI9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vc29hcC9lbmNvZGluZy9jbHIvMS4wIiBTT0FQLUVOVjplbmNvZGluZ1N0eWxlPSJodHRwOi8vc2NoZW1hcy54bWxzb2FwLm9yZy9zb2FwL2VuY29kaW5nLyI+DQo8U09BUC1FTlY6Qm9keT4NCjxhMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXIgaWQ9InJlZi0xIiB4bWxuczphMT0iaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS9jbHIvbnNhc3NlbS9Qcm90b0NvcmUvUHJvdG9Db3JlJTJDJTIwVmVyc2lvbiUzRDIuMTAuMS4zOTc2JTJDJTIwQ3VsdHVyZSUzRG5ldXRyYWwlMkMlMjBQdWJsaWNLZXlUb2tlbiUzRG51bGwiPg0KPE51bWJlck9mRWxlbWVudHM+MTwvTnVtYmVyT2ZFbGVtZW50cz4NCjxCYXNlLTBfSGFzRGF0YT5mYWxzZTwvQmFzZS0wX0hhc0RhdGE+DQo8QmFzZS0wX0hhc05lc3RlZERhdGE+dHJ1ZTwvQmFzZS0wX0hhc05lc3RlZERhdGE+DQo8QmFzZS0wX05lc3RlZERhdGFDb3VudD40PC9CYXNlLTBfTmVzdGVkRGF0YUNvdW50Pg0KPEJhc2UtMC0wX0hhc0RhdGE+dHJ1ZTwvQmFzZS0wLTBfSGFzRGF0YT4NCjxCYXNlLTAtMF9EYXRhIGlkPSJyZWYtMyI+UEZOUFFWQXRSVTVXT2tWdWRtVnNiM0JsSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhodGJHNXpPbmh6WkQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbE5QUVZBdFJVNURQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SWdlRzFzYm5NNlUwOUJVQzFGVGxZOUltaDBkSEE2THk5elkyaGxiV0Z6TG5odGJITnZZWEF1YjNKbkwzTnZZWEF2Wlc1MlpXeHZjR1V2SWlCNGJXeHVjenBqYkhJOUltaDBkSEE2THk5elkyaGxiV0Z6TG0xcFkzSnZjMjltZEM1amIyMHZjMjloY0M5bGJtTnZaR2x1Wnk5amJISXZNUzR3SWlCVFQwRlFMVVZPVmpwbGJtTnZaR2x1WjFOMGVXeGxQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SStEUW84VTA5QlVDMUZUbFk2UW05a2VUNE5DanhoTVRwVWNtRmpaV0ZpYkdWSlpDQnBaRDBpY21WbUxURWlJSGh0Ykc1ek9tRXhQU0pvZEhSd09pOHZjMk5vWlcxaGN5NXRhV055YjNOdlpuUXVZMjl0TDJOc2NpOXVjMkZ6YzJWdEwwUjVibUZ0YjFOcGJYVnNZWFJwYjI0dlJIbHVZVzF2VTJsdGRXeGhkR2x2YmxKVFFTVXlReVV5TUZabGNuTnBiMjRsTTBReUxqRXhMakF1TkRVek15VXlReVV5TUVOMWJIUjFjbVVsTTBSdVpYVjBjbUZzSlRKREpUSXdVSFZpYkdsalMyVjVWRzlyWlc0bE0wUnVkV3hzSWo0TkNqeEhkV2xrU1VRZ2VITnBPblI1Y0dVOUltRXlPa2QxYVdRaUlIaHRiRzV6T21FeVBTSm9kSFJ3T2k4dmMyTm9aVzFoY3k1dGFXTnliM052Wm5RdVkyOXRMMk5zY2k5dWN5OVRlWE4wWlcwaVBnMEtQRjloUGkweE1EUTROek14TkRBNVBDOWZZVDROQ2p4ZllqNHhORE01T1R3dlgySStEUW84WDJNK01Ua3pOems4TDE5alBnMEtQRjlrUGpFMk5Ed3ZYMlErRFFvOFgyVStPVEU4TDE5bFBnMEtQRjltUGprNVBDOWZaajROQ2p4Zlp6NHhPVEk4TDE5blBnMEtQRjlvUGpFd09Ud3ZYMmcrRFFvOFgyaytPRE04TDE5cFBnMEtQRjlxUGpJNFBDOWZhajROQ2p4ZmF6NHhOakk4TDE5clBnMEtQQzlIZFdsa1NVUStEUW84TDJFeE9sUnlZV05sWVdKc1pVbGtQZzBLUEM5VFQwRlFMVVZPVmpwQ2IyUjVQZzBLUEM5VFQwRlFMVVZPVmpwRmJuWmxiRzl3WlQ0TkNnPT08L0Jhc2UtMC0wX0RhdGE+DQo8QmFzZS0wLTBfSGFzTmVzdGVkRGF0YT5mYWxzZTwvQmFzZS0wLTBfSGFzTmVzdGVkRGF0YT4NCjxCYXNlLTAtMV9IYXNEYXRhPnRydWU8L0Jhc2UtMC0xX0hhc0RhdGE+DQo8QmFzZS0wLTFfRGF0YSBpZD0icmVmLTQiPlBGTlBRVkF0UlU1V09rVnVkbVZzYjNCbElIaHRiRzV6T25oemFUMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TVM5WVRVeFRZMmhsYldFdGFXNXpkR0Z1WTJVaUlIaHRiRzV6T25oelpEMGlhSFIwY0RvdkwzZDNkeTUzTXk1dmNtY3ZNakF3TVM5WVRVeFRZMmhsYldFaUlIaHRiRzV6T2xOUFFWQXRSVTVEUFNKb2RIUndPaTh2YzJOb1pXMWhjeTU0Yld4emIyRndMbTl5Wnk5emIyRndMMlZ1WTI5a2FXNW5MeUlnZUcxc2JuTTZVMDlCVUMxRlRsWTlJbWgwZEhBNkx5OXpZMmhsYldGekxuaHRiSE52WVhBdWIzSm5MM052WVhBdlpXNTJaV3h2Y0dVdklpQjRiV3h1Y3pwamJISTlJbWgwZEhBNkx5OXpZMmhsYldGekxtMXBZM0p2YzI5bWRDNWpiMjB2YzI5aGNDOWxibU52WkdsdVp5OWpiSEl2TVM0d0lpQlRUMEZRTFVWT1ZqcGxibU52WkdsdVoxTjBlV3hsUFNKb2RIUndPaTh2YzJOb1pXMWhjeTU0Yld4emIyRndMbTl5Wnk5emIyRndMMlZ1WTI5a2FXNW5MeUkrRFFvOFUwOUJVQzFGVGxZNlFtOWtlVDROQ2p4aE1UcFVjbUZqWldGaWJHVkpaQ0JwWkQwaWNtVm1MVEVpSUhodGJHNXpPbUV4UFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwyTnNjaTl1YzJGemMyVnRMMFI1Ym1GdGIxTnBiWFZzWVhScGIyNHZSSGx1WVcxdlUybHRkV3hoZEdsdmJsSlRRU1V5UXlVeU1GWmxjbk5wYjI0bE0wUXlMakV4TGpBdU5EVXpNeVV5UXlVeU1FTjFiSFIxY21VbE0wUnVaWFYwY21Gc0pUSkRKVEl3VUhWaWJHbGpTMlY1Vkc5clpXNGxNMFJ1ZFd4c0lqNE5DanhIZFdsa1NVUWdlSE5wT25SNWNHVTlJbUV5T2tkMWFXUWlJSGh0Ykc1ek9tRXlQU0pvZEhSd09pOHZjMk5vWlcxaGN5NXRhV055YjNOdlpuUXVZMjl0TDJOc2NpOXVjeTlUZVhOMFpXMGlQZzBLUEY5aFBqY3pOVGMxTXpBeU9Ud3ZYMkUrRFFvOFgySStMVEk0T0RFNVBDOWZZajROQ2p4Zll6NHhPRFkxT1R3dlgyTStEUW84WDJRK01UTTFQQzlmWkQ0TkNqeGZaVDR4TnprOEwxOWxQZzBLUEY5bVBqZzNQQzlmWmo0TkNqeGZaejR4Tmp3dlgyYytEUW84WDJnK01UVXdQQzlmYUQ0TkNqeGZhVDR4TnpFOEwxOXBQZzBLUEY5cVBqRXdNand2WDJvK0RRbzhYMnMrTVRFMVBDOWZhejROQ2p3dlIzVnBaRWxFUGcwS1BDOWhNVHBVY21GalpXRmliR1ZKWkQ0TkNqd3ZVMDlCVUMxRlRsWTZRbTlrZVQ0TkNqd3ZVMDlCVUMxRlRsWTZSVzUyWld4dmNHVStEUW89PC9CYXNlLTAtMV9EYXRhPg0KPEJhc2UtMC0xX0hhc05lc3RlZERhdGE+ZmFsc2U8L0Jhc2UtMC0xX0hhc05lc3RlZERhdGE+DQo8QmFzZS0wLTJfSGFzRGF0YT50cnVlPC9CYXNlLTAtMl9IYXNEYXRhPg0KPEJhc2UtMC0yX0RhdGEgaWQ9InJlZi01Ij5QRk5QUVZBdFJVNVdPa1Z1ZG1Wc2IzQmxJSGh0Ykc1ek9uaHphVDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01TOVlUVXhUWTJobGJXRXRhVzV6ZEdGdVkyVWlJSGh0Ykc1ek9uaHpaRDBpYUhSMGNEb3ZMM2QzZHk1M015NXZjbWN2TWpBd01TOVlUVXhUWTJobGJXRWlJSGh0Ykc1ek9sTlBRVkF0UlU1RFBTSm9kSFJ3T2k4dmMyTm9aVzFoY3k1NGJXeHpiMkZ3TG05eVp5OXpiMkZ3TDJWdVkyOWthVzVuTHlJZ2VHMXNibk02VTA5QlVDMUZUbFk5SW1oMGRIQTZMeTl6WTJobGJXRnpMbmh0YkhOdllYQXViM0puTDNOdllYQXZaVzUyWld4dmNHVXZJaUI0Yld4dWN6cGpiSEk5SW1oMGRIQTZMeTl6WTJobGJXRnpMbTFwWTNKdmMyOW1kQzVqYjIwdmMyOWhjQzlsYm1OdlpHbHVaeTlqYkhJdk1TNHdJaUJUVDBGUUxVVk9WanBsYm1OdlpHbHVaMU4wZVd4bFBTSm9kSFJ3T2k4dmMyTm9aVzFoY3k1NGJXeHpiMkZ3TG05eVp5OXpiMkZ3TDJWdVkyOWthVzVuTHlJK0RRbzhVMDlCVUMxRlRsWTZRbTlrZVQ0TkNqeGhNVHBVY21GalpXRmliR1ZKWkNCcFpEMGljbVZtTFRFaUlIaHRiRzV6T21FeFBTSm9kSFJ3T2k4dmMyTm9aVzFoY3k1dGFXTnliM052Wm5RdVkyOXRMMk5zY2k5dWMyRnpjMlZ0TDBSNWJtRnRiMU5wYlhWc1lYUnBiMjR2UkhsdVlXMXZVMmx0ZFd4aGRHbHZibEpUUVNVeVF5VXlNRlpsY25OcGIyNGxNMFF5TGpFeExqQXVORFV6TXlVeVF5VXlNRU4xYkhSMWNtVWxNMFJ1WlhWMGNtRnNKVEpESlRJd1VIVmliR2xqUzJWNVZHOXJaVzRsTTBSdWRXeHNJajROQ2p4SGRXbGtTVVFnZUhOcE9uUjVjR1U5SW1FeU9rZDFhV1FpSUhodGJHNXpPbUV5UFNKb2RIUndPaTh2YzJOb1pXMWhjeTV0YVdOeWIzTnZablF1WTI5dEwyTnNjaTl1Y3k5VGVYTjBaVzBpUGcwS1BGOWhQakV6T1RnME1qUTNOems4TDE5aFBnMEtQRjlpUGkwMU16azJQQzlmWWo0TkNqeGZZejR4T1RFME1Ud3ZYMk0rRFFvOFgyUStNVGMyUEM5ZlpENE5DanhmWlQ0ME5qd3ZYMlUrRFFvOFgyWStNVEl6UEM5ZlpqNE5DanhmWno0eE5ERThMMTluUGcwS1BGOW9QakUwTWp3dlgyZytEUW84WDJrK01UWTNQQzlmYVQ0TkNqeGZhajR4TVRZOEwxOXFQZzBLUEY5clBqSXlOVHd2WDJzK0RRbzhMMGQxYVdSSlJENE5Dand2WVRFNlZISmhZMlZoWW14bFNXUStEUW84TDFOUFFWQXRSVTVXT2tKdlpIaytEUW84TDFOUFFWQXRSVTVXT2tWdWRtVnNiM0JsUGcwSzwvQmFzZS0wLTJfRGF0YT4NCjxCYXNlLTAtMl9IYXNOZXN0ZWREYXRhPmZhbHNlPC9CYXNlLTAtMl9IYXNOZXN0ZWREYXRhPg0KPEJhc2UtMC0zX0hhc0RhdGE+dHJ1ZTwvQmFzZS0wLTNfSGFzRGF0YT4NCjxCYXNlLTAtM19EYXRhIGlkPSJyZWYtNiI+UEZOUFFWQXRSVTVXT2tWdWRtVnNiM0JsSUhodGJHNXpPbmh6YVQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0V0YVc1emRHRnVZMlVpSUhodGJHNXpPbmh6WkQwaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNUzlZVFV4VFkyaGxiV0VpSUhodGJHNXpPbE5QUVZBdFJVNURQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SWdlRzFzYm5NNlUwOUJVQzFGVGxZOUltaDBkSEE2THk5elkyaGxiV0Z6TG5odGJITnZZWEF1YjNKbkwzTnZZWEF2Wlc1MlpXeHZjR1V2SWlCNGJXeHVjenBqYkhJOUltaDBkSEE2THk5elkyaGxiV0Z6TG0xcFkzSnZjMjltZEM1amIyMHZjMjloY0M5bGJtTnZaR2x1Wnk5amJISXZNUzR3SWlCVFQwRlFMVVZPVmpwbGJtTnZaR2x1WjFOMGVXeGxQU0pvZEhSd09pOHZjMk5vWlcxaGN5NTRiV3h6YjJGd0xtOXlaeTl6YjJGd0wyVnVZMjlrYVc1bkx5SStEUW84VTA5QlVDMUZUbFk2UW05a2VUNE5DanhoTVRwVWNtRmpaV0ZpYkdWSlpDQnBaRDBpY21WbUxURWlJSGh0Ykc1ek9tRXhQU0pvZEhSd09pOHZjMk5vWlcxaGN5NXRhV055YjNOdlpuUXVZMjl0TDJOc2NpOXVjMkZ6YzJWdEwwUjVibUZ0YjFOcGJYVnNZWFJwYjI0dlJIbHVZVzF2VTJsdGRXeGhkR2x2YmxKVFFTVXlReVV5TUZabGNuTnBiMjRsTTBReUxqRXhMakF1TkRVek15VXlReVV5TUVOMWJIUjFjbVVsTTBSdVpYVjBjbUZzSlRKREpUSXdVSFZpYkdsalMyVjVWRzlyWlc0bE0wUnVkV3hzSWo0TkNqeEhkV2xrU1VRZ2VITnBPblI1Y0dVOUltRXlPa2QxYVdRaUlIaHRiRzV6T21FeVBTSm9kSFJ3T2k4dmMyTm9aVzFoY3k1dGFXTnliM052Wm5RdVkyOXRMMk5zY2k5dWN5OVRlWE4wWlcwaVBnMEtQRjloUGkwMU1EYzJOak15T0RVOEwxOWhQZzBLUEY5aVBpMHlOVGd6Tmp3dlgySStEUW84WDJNK01UZ3pNRE04TDE5alBnMEtQRjlrUGpFME56d3ZYMlErRFFvOFgyVStPVEE4TDE5bFBnMEtQRjltUGpVNVBDOWZaajROQ2p4Zlp6NDFPVHd2WDJjK0RRbzhYMmcrTkRNOEwxOW9QZzBLUEY5cFBqRTJOend2WDJrK0RRbzhYMm8rTmpjOEwxOXFQZzBLUEY5clBqazNQQzlmYXo0TkNqd3ZSM1ZwWkVsRVBnMEtQQzloTVRwVWNtRmpaV0ZpYkdWSlpENE5Dand2VTA5QlVDMUZUbFk2UW05a2VUNE5Dand2VTA5QlVDMUZUbFk2Ulc1MlpXeHZjR1UrRFFvPTwvQmFzZS0wLTNfRGF0YT4NCjxCYXNlLTAtM19IYXNOZXN0ZWREYXRhPmZhbHNlPC9CYXNlLTAtM19IYXNOZXN0ZWREYXRhPg0KPC9hMTpDYWxsU2l0ZV94MDAyQl9UcmFjZVNlcmlhbGlzZXJIZWxwZXI+DQo8L1NPQVAtRU5WOkJvZHk+DQo8L1NPQVAtRU5WOkVudmVsb3BlPg0K"
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.1.3976",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -243.526611328125,
      "EyeY": 4772.544921875,
      "EyeZ": 4070.00390625,
      "LookX": 1925.83349609375,
      "LookY": -3808.603515625,
      "LookZ": -1494.42578125,
      "UpX": 0.55864423513412476,
      "UpY": 0.70710515975952148,
      "UpZ": -0.43349626660346985
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "AdaptiveComponent.Locations",
        "Id": "be22abd3b2ea4eab95531325f7382bfa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 360.64366235643752,
        "Y": -27.326109246965473
      },
      {
        "ShowGeometry": true,
        "Name": "Line.ByStartPointEndPoint",
        "Id": "917a02b3bda04b41a3afd8cfc520a20e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2148.2953400551305,
        "Y": 253.22287638908
      },
      {
        "ShowGeometry": true,
        "Name": "to meters+rearrange+filter",
        "Id": "e87da6ba91aa455cb0d516cb66a4aeb1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1105.04060558051,
        "Y": 142.89803969438319
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "863926c6d0ea4b8ba932aac833354d76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1101.7104465863561,
        "Y": -426.52269550174753
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ef4fcf581ad3480ab41d6b682433b450",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1101.7894629065459,
        "Y": -256.24044332370818
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "79db57e7b7d3488c8fbaf2c90c370461",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1117.6169936446468,
        "Y": -113.75074948653594
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b0971dcf1fd047d580cec0483210bdfd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1473.0736356973036,
        "Y": 118.3129172574811
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3384236d715c499e9b5b8ef9aabd5851",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1470.7883490543406,
        "Y": 206.89574018891813
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e673add8a3fc45bf880cd766dbffb528",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1467.7883490543406,
        "Y": 297.55832364041441
      },
      {
        "ShowGeometry": true,
        "Name": "rearrange by N",
        "Id": "688038111f12410ca3c3552b70214f15",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 913.46444337213256,
        "Y": -197.89734459930446
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "a9311a6289a042f9898f76e395c2613e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2531.0273952138446,
        "Y": 919.24479175782619
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f0692c59a60c4d3aad09d9f5cd58492e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2140.0794440783357,
        "Y": 1026.0315628996659
      },
      {
        "ShowGeometry": true,
        "Name": "angle",
        "Id": "b3c6fb944fdd42439f20e656e92cfdc3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1576.84246917725,
        "Y": -338.794104964979
      },
      {
        "ShowGeometry": true,
        "Name": "angle",
        "Id": "14902ef6e3334f4db028e9c3e73695bb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1372.48894762292,
        "Y": -322.463199986497
      },
      {
        "ShowGeometry": true,
        "Name": "AnalyticalBar.SetGammaAngle",
        "Id": "5f602348ca0843bfbfba1ed0b699c1fc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3986.0159092116596,
        "Y": 186.26488029876759
      },
      {
        "ShowGeometry": true,
        "Name": "AnalyticalBar.ByLine",
        "Id": "6075ca0906964c6fb38704d0b51a9b58",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2607.8120109482265,
        "Y": 228.91855016588931
      },
      {
        "ShowGeometry": true,
        "Name": "AnalyticalNode.SetSupportByName",
        "Id": "803863a636114370a17a1835b02953ad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2424.8811108766386,
        "Y": 1478.1383016913796
      },
      {
        "ShowGeometry": true,
        "Name": "AnalyticalNode.ByPoint",
        "Id": "940ed177526045aaa68f5620b098cb45",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2082.029951496379,
        "Y": 1477.3427225453183
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ccbe03818cba459eaa69d17fc163959a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2183.45441322728,
        "Y": 1611.5192352336276
      },
      {
        "ShowGeometry": true,
        "Name": "for Z==0 ",
        "Id": "9bc4a4abc17d4b79b47ed72385ab4fdc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1838.5441448773308,
        "Y": 1460.9944212493165
      },
      {
        "ShowGeometry": true,
        "Name": "combine new",
        "Id": "0bb8a95048c14a389d2fcbc38b17002a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1500.1411326052873,
        "Y": 1321.3766565352687
      },
      {
        "ShowGeometry": true,
        "Name": "create bar section",
        "Id": "1c889fef284c44bbaf2096de52e8fce0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3302.868304733654,
        "Y": 1008.6530143691389
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bca6bfab2d714e169fc70dbd33038a02",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2987.4207327365261,
        "Y": 809.043748721039
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c2afad3edacc407db0143e5fcd62c168",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2977.4851488468662,
        "Y": 900.906970066938
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "a676d5d537f0433cb193f68bc11f5883",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2560.655631139356,
        "Y": 1116.7410559456589
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f2a80c82fbd74fd88bcd9b94c380182c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2147.2802234913361,
        "Y": 1141.66761081683
      },
      {
        "ShowGeometry": true,
        "Name": "AnalyticalBar.SetSectionByName",
        "Id": "9c443eb5973547b8bd7323c1d82695ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3900.6033595448262,
        "Y": 813.19927294884008
      },
      {
        "ShowGeometry": true,
        "Name": "Width",
        "Id": "99c49945e6ec42b5a4470050d6a66b1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2989.98526454626,
        "Y": 1026.14245344595
      },
      {
        "ShowGeometry": true,
        "Name": "Height",
        "Id": "314862d186b64a6897f92f46b03693bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2988.6757208816234,
        "Y": 1218.1593999460472
      },
      {
        "ShowGeometry": true,
        "Name": "wait for",
        "Id": "084edb144fe64c6b97df32e0e7f4170a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3670.2007970524619,
        "Y": 950.94051842158149
      },
      {
        "ShowGeometry": true,
        "Name": "fix fckn center",
        "Id": "a9d203e97f4d4a488ad6564ebd05d9d9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1718.4305758042485,
        "Y": 181.1935272210842
      },
      {
        "ShowGeometry": true,
        "Name": "List.FirstItem",
        "Id": "63ad724097a74825993c1fb5194501fd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1932.119597201071,
        "Y": 176.41689637977308
      },
      {
        "ShowGeometry": true,
        "Name": "List.LastItem",
        "Id": "a5f6ee59ccc54045bca512282ec16d51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1920.7493403840556,
        "Y": 289.08580483929222
      },
      {
        "ShowGeometry": true,
        "Name": "matrix +/- angle + reset",
        "Id": "359a5f06af224ceab42c0d1c2b125738",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3024.8378284409127,
        "Y": -339.92914125438949
      },
      {
        "ShowGeometry": true,
        "Name": "*",
        "Id": "955e312146f248fba0cf65329069c723",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3767.3429683002478,
        "Y": 94.515138714624356
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "2ef9d92f2a244e738ec9c3bdb1e787c3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3274.413758327144,
        "Y": -392.65828287550551
      },
      {
        "ShowGeometry": true,
        "Name": "check",
        "Id": "bce92b1a4ab745c2a4b733392670201e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1723.2935741324754,
        "Y": 345.25640951041788
      },
      {
        "ShowGeometry": true,
        "Name": "matrix +/- angle check",
        "Id": "2c608634212a42bfa2faf9d947e7c6d9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2952.18559580243,
        "Y": -725.138134097403
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "c356887ae316466ba64c6752671a10fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3447.4607995174529,
        "Y": -728.20004852451223
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "bdbe1e39f39d433ca8a8e364787c3db6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 737.23125983670639,
        "Y": 64.7687879016226
      },
      {
        "ShowGeometry": true,
        "Name": "Number Slider",
        "Id": "dc98c925051746a59838367e139eb780",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 135.87199269495659,
        "Y": -543.34350482173511
      },
      {
        "ShowGeometry": true,
        "Name": "Select Model Elements",
        "Id": "97583c5a8e58490aac65f447a31114de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -540.64215139239127,
        "Y": 208.36994513666536
      },
      {
        "ShowGeometry": true,
        "Name": "filter adaptive only",
        "Id": "86301920c37447f3aad893366e9c51dd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -115.23846896398675,
        "Y": 50.483136407211532
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "679edd29ae214842af4746d69e1d8c0e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -125.49587504145279,
        "Y": 267.897220707054
      },
      {
        "ShowGeometry": true,
        "Name": "filter",
        "Id": "d4587b5faf8948a9bcb6c72e30d96aad",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 106.82680794046723,
        "Y": 88.7738677838638
      },
      {
        "ShowGeometry": true,
        "Name": "Category.ByName",
        "Id": "27317bd0853b4b5fb8cfa539edcc02d1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -689.899059139216,
        "Y": 65.201725834917568
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "c5483152885b4abdb345610f1860a7b7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -404.91603932031626,
        "Y": 60.504203530207576
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "339f50c41cc04b3bbcbc36800a4d6c71",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -926.34101514280587,
        "Y": 79.294292749037766
      }
    ],
    "Annotations": [
      {
        "Id": "7bd543d94cad4f969431e3f71f50cd08",
        "Title": "Long lacing",
        "Nodes": [
          "5f602348ca0843bfbfba1ed0b699c1fc"
        ],
        "Left": 3976.0159092116596,
        "Top": 133.26488029876759,
        "Width": 274.99999999999955,
        "Height": 172.0,
        "FontSize": 36.0,
        "InitialTop": 186.26488029876759,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "26e334b755ab4810bedc1536c79bcfab",
        "Title": "supports",
        "Nodes": [
          "803863a636114370a17a1835b02953ad",
          "940ed177526045aaa68f5620b098cb45",
          "ccbe03818cba459eaa69d17fc163959a",
          "9bc4a4abc17d4b79b47ed72385ab4fdc"
        ],
        "Left": 1828.5441448773308,
        "Top": 1407.9944212493165,
        "Width": 861.33696599930772,
        "Height": 296.52481398431109,
        "FontSize": 36.0,
        "InitialTop": 1460.9944212493165,
        "InitialHeight": 295.52481398431109,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "09b0ad9f0946457f8c753d7fefa5a5bc",
        "Title": "set section",
        "Nodes": [
          "a9311a6289a042f9898f76e395c2613e",
          "f0692c59a60c4d3aad09d9f5cd58492e",
          "1c889fef284c44bbaf2096de52e8fce0",
          "bca6bfab2d714e169fc70dbd33038a02",
          "c2afad3edacc407db0143e5fcd62c168",
          "a676d5d537f0433cb193f68bc11f5883",
          "f2a80c82fbd74fd88bcd9b94c380182c",
          "9c443eb5973547b8bd7323c1d82695ba"
        ],
        "Left": 2130.0794440783357,
        "Top": 756.043748721039,
        "Width": 2070.5239154664905,
        "Height": 479.69730722461986,
        "FontSize": 36.0,
        "InitialTop": 809.043748721039,
        "InitialHeight": 477.62386209579086,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "e4fa538ede6647a0aec6697617f29774",
        "Title": "Steps:               \r\n1. Run\r\n2. Change number\r\n3. Run\r\n4. Change number\r\n5. Run\r\n\r\nDONE",
        "Nodes": [
          "dc98c925051746a59838367e139eb780"
        ],
        "Left": 125.87199269495659,
        "Top": -899.34350482173511,
        "Width": 319.0,
        "Height": 424.0,
        "FontSize": 36.0,
        "InitialTop": -543.34350482173511,
        "InitialHeight": 145.0,
        "TextblockHeight": 346.0,
        "Background": "#FFFFB8D8"
      }
    ],
    "X": -2126.1651586013431,
    "Y": -470.86773572819095,
    "Zoom": 0.90258557867638245
  }
}